# Escreva seu script abaixo, seguindo a sintaxe das classes em estrutura_ud.py
# O script é executado dentro de um loop (repetição) para cada "sentence" do corpus.
# Dentro de cada "sentence", é realizado ainda um outro loop para acessar cada "token" de "sentence.tokens" (lista de tokens dessa frase), momento em que é aplicada a regra que poderá ser editada abaixo.
# Não utilize as abreviações disponíveis apenas para busca, como "nt", "pt" e "ht"
# Para adicionar novos valores a colunas com múltiplos valores (features, misc), utilize as funções append_to() e remove_from(), como no exemplo abaixo
# Ex: append_to(token.feats, "Gender=Masc|Number=Sing")
# Para buscar utilizando expressão regular, utilize a função regex(), como no exemplo abaixo
# Ex: regex(".*mod", token.deprel)

#Regras específicas para certas entidades de tempo

##Casos pontuais de tempo; ENTIDADE=S-TEMPO -> ENTIDADE=S-TEMPO-SUBCATEGORIA
#if regex("[a-zA-Z]*intraday", token.lemma):
#	token.xpos = "ENTIDADE=S-TEMPO-TEMPO_CALEND"

#if regex("ENTIDADE=S-TEMPO", token.xpos) and regex("hoje", token.lemma):
#	token.xpos = "ENTIDADE=S-TEMPO-TEMPO_CALEND"

#if regex("ENTIDADE=S-TEMPO", token.xpos) and regex("ontem", token.lemma):
#	token.xpos = "ENTIDADE=S-TEMPO-TEMPO_CALEND"	

#if regex("ENTIDADE=S-TEMPO", token.xpos) and regex("16h", token.lemma):
#	token.xpos = "ENTIDADE=S-TEMPO-TEMPO_CALEND"

#if regex("ENTIDADE=S-TEMPO", token.xpos) and regex("14h", token.lemma):
#	token.xpos = "ENTIDADE=S-TEMPO-TEMPO_CALEND"

if regex("ENTIDADE=S-TEMPO", token.xpos) and regex("12h", token.lemma):
	token.xpos = "ENTIDADE=S-TEMPO-TEMPO_CALEND"		

#if regex("ontem|hoje", token.word) and regex("_", token.xpos):
#	token.xpos = "ENTIDADE=S-TEMPO-TEMPO_CALEND"
